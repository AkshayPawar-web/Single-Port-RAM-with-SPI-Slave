#RTL CODE FOR RAM
module RAM (
    input clk,
    input rst_n,
    input rx_valid,
    input [9:0] din,
    output reg [7:0] dout,
    output reg tx_valid
);

    parameter MEM_DEPTH = 256;
    parameter ADDR_SIZE = 8;


// Creating the memory array
reg [ADDR_SIZE-1:0] memory [MEM_DEPTH-1:0]; 

reg [7:0] addr_wr; // Write address 
reg [7:0] addr_re; // Read address


always @(posedge clk) begin  
    if (!rst_n) begin   
        dout <= 8'b0;
        tx_valid <= 1'b0;
        addr_wr <= 8'b0;
        addr_re <= 8'b0;
    end else begin
        if (rx_valid) begin 
            case (din[9:8])
                2'b00: begin
                    addr_wr <= din[7:0]; // Write address
                    tx_valid <= 1'b0;
                end
                2'b01: begin
                    memory[addr_wr] <= din[7:0]; // Write data 
                    tx_valid <= 1'b0;
                end
                2'b10: begin
                    addr_re <= din[7:0]; // Read address
                    tx_valid <= 1'b0;
                end
                2'b11: begin // Read data
                    dout <= memory[addr_re];
                    tx_valid <= 1'b1;
                end
            endcase
        end
    end
end
endmodule
